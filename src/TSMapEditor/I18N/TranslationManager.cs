using System;
using System.Globalization;
using System.IO;
using System.Linq;

namespace TSMapEditor.I18N
{
    /// <summary>
    /// Manages the translation system initialization and language switching.
    /// </summary>
    public static class TranslationManager
    {
        private static bool _initialized = false;
        private static readonly string TranslationsPath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "Translations");

        /// <summary>
        /// Initializes the translation system.
        /// </summary>
        public static void Initialize()
        {
            if (_initialized)
                return;

            _initialized = true;

            // Try to load translation based on current UI culture
            var currentCulture = CultureInfo.CurrentUICulture;
            LoadTranslationForCulture(currentCulture);

            // Register all translation strings found in code
            try
            {
                // This will be generated by the TranslationNotifierGenerator
                var generatedType = Type.GetType("TSMapEditor.Generated.TranslationNotifier");
                if (generatedType != null)
                {
                    var registerMethod = generatedType.GetMethod("Register");
                    registerMethod?.Invoke(null, null);
                }
            }
            catch (Exception ex)
            {
                // Log error but don't crash the application
                System.Diagnostics.Debug.WriteLine($"Failed to register translation strings: {ex.Message}");
            }
        }

        /// <summary>
        /// Loads translation for the specified culture.
        /// </summary>
        /// <param name="culture">The culture to load translation for.</param>
        public static void LoadTranslationForCulture(CultureInfo culture)
        {
            if (culture == null)
                return;

            // Try exact match first (e.g., zh-CN)
            var translationFile = Path.Combine(TranslationsPath, culture.Name, "Translation.ini");
            if (File.Exists(translationFile))
            {
                Translation.Instance.LoadFromFile(translationFile);
                return;
            }

            // Try parent culture (e.g., zh for zh-CN)
            if (!culture.IsNeutralCulture && culture.Parent != CultureInfo.InvariantCulture)
            {
                translationFile = Path.Combine(TranslationsPath, culture.Parent.Name, "Translation.ini");
                if (File.Exists(translationFile))
                {
                    Translation.Instance.LoadFromFile(translationFile);
                    return;
                }
            }

            // Fallback to English or keep default
            translationFile = Path.Combine(TranslationsPath, "en", "Translation.ini");
            if (File.Exists(translationFile))
            {
                Translation.Instance.LoadFromFile(translationFile);
            }
        }

        /// <summary>
        /// Gets all available translation languages.
        /// </summary>
        /// <returns>Array of available language codes.</returns>
        public static string[] GetAvailableLanguages()
        {
            if (!Directory.Exists(TranslationsPath))
                return new string[0];

            return Directory.GetDirectories(TranslationsPath)
                .Select(Path.GetFileName)
                .Where(lang => File.Exists(Path.Combine(TranslationsPath, lang, "Translation.ini")))
                .ToArray();
        }

        /// <summary>
        /// Switches to the specified language.
        /// </summary>
        /// <param name="languageCode">The language code (e.g., "zh-CN", "en").</param>
        public static void SwitchLanguage(string languageCode)
        {
            if (string.IsNullOrEmpty(languageCode))
                return;

            try
            {
                var culture = new CultureInfo(languageCode);
                Translation.Instance.Clear();
                LoadTranslationForCulture(culture);
            }
            catch (Exception ex)
            {
                System.Diagnostics.Debug.WriteLine($"Failed to switch to language {languageCode}: {ex.Message}");
            }
        }

        /// <summary>
        /// Exports missing translation strings to a file.
        /// </summary>
        /// <param name="filePath">The file path to export to.</param>
        public static void ExportMissingTranslations(string filePath = null)
        {
            if (string.IsNullOrEmpty(filePath))
            {
                filePath = Path.Combine(AppDomain.CurrentDomain.BaseDirectory, "MissingTranslations.ini");
            }

            Translation.Instance.ExportMissingTranslations(filePath);
        }
    }
}